package habrahabrguistatemachine;

import habrahabrguistatemachine.mvc.MvcAnswerDialogController;
import habrahabrguistatemachine.mvc.MvcAnswerDialogModel;
import habrahabrguistatemachine.mvc.MvcAnswerDialogModelListener;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

/**
 * Solving the problem with MVC way
 * 
 * this class itself is View in MVC
 * @author __nocach
 *
 */
public class MvcWay extends javax.swing.JFrame implements MvcAnswerDialogModelListener{
	private Logger logger = Logger.getLogger(StandardWay.class.getName());
	public MvcWay() throws HeadlessException {
		super();
		initComponents();
		
		final MvcAnswerDialogController controller = new MvcAnswerDialogController(new MvcAnswerDialogModel(this));
		doButton.addActionListener(new ActionListener() {
			@Override public void actionPerformed(ActionEvent e) {
				controller.doButtonClicked();
			}
		});
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doButton = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        doButton.setText("FindAnswer");
        labelStatus.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelStatus)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelStatus)
                .addGap(18, 18, 18)
                .addComponent(doButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StandardWay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StandardWay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StandardWay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StandardWay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MvcWay().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doButton;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
    
    //listener methods that will update gui by model changes
	@Override
	public void onPreparingStarted() {
		labelStatus.setText("Prepearing... ");
        doButton.setEnabled(false);
        logger.info("preparing...");
	}

	@Override
	public void onPreparedSuccess() {
        labelStatus.setText("I am prepared to answer the meaning of life");
        doButton.setEnabled(true);
        logger.info("prepared");
	}

	@Override
	public void onPreparedFailure() {
		JOptionPane.showMessageDialog(rootPane, "failed to find answerer to the question");
        dispose();
        logger.severe("failed to prepare");
	}

	@Override
	public void onSearchingProgress(int progress) {
		progressBar.setValue(progress);
	}

	@Override
	public void onSearchingStarted() {
		doButton.setText("In Search");
        doButton.setEnabled(false);
        labelStatus.setText("searching...");
	}

	@Override
	public void onSearchCompleteSuccess(Integer answer) {
		logger.info("got the answer");
		labelStatus.setText("answer was found");
        doButton.setText("Find again");
        doButton.setEnabled(true);
        JOptionPane.showMessageDialog(rootPane, "THE ANSWER IS " + answer);
	}

	@Override
	public void onSearchCompleteFailure() {
		logger.info("error while retrieving the answer");
        JOptionPane.showMessageDialog(rootPane, "Error while searching for meaning of life");
	}
}
